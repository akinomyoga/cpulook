#!/usr/bin/env bash

function cpulook/initialize-cpudir {
  unset -f "$FUNCNAME"

  local script=$0
  if [[ -h $script ]]; then
    local path=$(realpath "$0" || readlink -f "$0" || /bin/readlink -f "$script") 2>/dev/null
    [[ $path ]] && script=$path
  fi

  [[ $script =~ ^(/?)(.*/)[^/]*$ ]]
  local script_dir=${BASH_REMATCH[1]:-$PWD/}${BASH_REMATCH[2]}
  script_dir=${script_dir%/}
  if [[ -d ${script_dir:-/} ]]; then
    cpudir=$script_dir
  elif local dir=${XDG_DATA_HOME:-$HOME/.local/share}/cpulook; [[ -d $dir ]]; then
    cpudir=$dir
  else
    cpudir=$script_dir
  fi

  # Go to the parent directory until we find $cpudir/lib/cpudef.bash
  while
    local common=$cpudir/lib/cpudef.bash
    if [[ -f $common ]]; then
      if [[ ! -r $common ]]; then
        printf '%s\n' "$script: permission denied for the cpulook directory." >&2
        return 1
      fi
      source "$common"
      return "$?"
    fi
    [[ $cpudir == */* ]]
  do
    cpudir=${cpudir%/*}
  done

  cpudir=
  printf '%s\n' "$script: failed to detect the cpulook directory." >&2
  return 1
}
cpulook/initialize-cpudir || exit "$?"
##----CPULOOK_COMMON_HEADER_END----

#------------------------------------------------------------------------------
# definitions

source "$cpudir/m/switch"
if [[ $1 == v ]]; then
  fV=v
  source "$cpudir/lib/echox.bash"
else
  fV=
fi

list=$cpudir/task.txt
cook=$cpudir/task.eat
stat=$cpulook_cache/cpustat.txt
cpulook_log_file=$cpudir/cpuseekd.log

# configuration
cpu_wait=300
task_wait=600

function fileage {
  # how many seconds has past since the file was modified
  local file=$1
  cpulook/print $(($(date '+%s')-$(date '+%s' -r "$file")))
}

function isvalidcpu {
  local cpus=$(awk '/^[[:space:]]*#/{next;}/[^[:space:]]/{print $1}' "$cpulook_cpulist")
  local cpu
  for cpu in $cpus; do
    [[ $cpu == "$1" ]] && return 0
  done

  echoe "fatal: invalid cpu name '$1'"
  return 1
}

#------------------------------------------------------------------------------
# cpu managing

declare -a cpustat_name
declare -a cpustat_idle
declare -a cpustat_info
declare    cpustat_size=0
declare    cpustat_first=1
function update_cpustat {
  if [[ $fV ]]; then
    echom "updating current cpustatus ..."
    "$cpudir/cpulook" 10
  else
    "$cpudir/cpulook" 10 &>/dev/null
  fi

  cpustat_first=
  cpustat_size=0
  while read line; do
    local -a arr=($line)
    cpustat_name[${arr[0]}]=${arr[1]}
    cpustat_idle[${arr[0]}]=${arr[2]}
    cpustat_nice[${arr[0]}]=${arr[3]}
    cpustat_size=$(($cpustat_size+1))
  done < <(awk 'BEGIN{i=0} $3!="I"{print i++,$1,$3,$4}' "$stat")
}

declare freecpu_name
declare freecpu_nice
function allocate_cpu {
  if [[ ! $cpustat_first && $cpustat_size -eq 0 ]]; then
    # 残機がないとき暫く待って再度取得
    if [[ -e $stat ]]; then
      local _wait=$((60-$(fileage "$stat")))
      ((_wait>0)) && sleep "$_wait"
    fi
    update_cpustat
  elif [[ $cpustat_first || ! -e $stat || $(fileage "$stat") -gt 60 ]]; then
    # cpustat 情報が古い時、更新
    update_cpustat
  fi

  while true; do
    local name=

    local j
    local n=$cpustat_size
    for ((j=0;j<n;j++)); do
      if ((cpustat_idle[j]>0)); then
        local name=${cpustat_name[j]}
        local idle=${cpustat_idle[j]}
        local nice=${cpustat_nice[j]}
        ((cpustat_idle[j]=idle-1))

        isvalidcpu "$name" || name=
        break
      fi
    done
    
    if [[ ! $name ]]; then
      if [[ $fV ]]; then
        echom "$(date +'[%F %T]') there are no more cpus available. waiting for $cpu_wait seconds ..."
      fi
      sleep $cpu_wait
      update_cpustat
      continue
    fi

    freecpu_name=$name
    freecpu_nice=$nice
    return
  done
}

#------------------------------------------------------------------------------
#-- single instance guard --
(($(ps ux|grep '\bcpuseekd\b'|wc -l) > 1)) || exit 0

function seek_submit {
  local cmd=$1

  allocate_cpu
  local name=$freecpu_name
  local nice=$freecpu_nice
  [[ $name == 0 ]] && exit 1

  cpulook/system:"$cpulook_system"/submit
  return "$?"
}

function set_term_title { cpulook/put $'\ek'"$*"$'\e\\'; }

function next_tasklist {
  [[ -s $list ]] && return 0

  set_term_title "cpuseekd: ### waiting next task.txt... ###"
  sleep $task_wait
  [[ -s $list ]]
}

while next_tasklist; do
  [[ -f $cook ]] && mv "$cook" "$cook.$(date +%Y%m%d-%H%M%S -r "$cook")"
  mv "$list" "$cook"
  iN=$(cat "$cook" | wc -l)
  for((i=1;i<=iN;i++)); do
    set_term_title "cpuseekd: ### throwing task $i/$iN ###"
    cmd="$(tail -n +$i $cook | head -1)"
    [[ -n $cmd ]] && seek_submit "$cmd"
  done
done
