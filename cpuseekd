#!/usr/bin/env bash

function cpulook/initialize-cpudir {
  unset -f "$FUNCNAME"

  local script=$0
  if [[ -h $script ]]; then
    local path=$(realpath "$0" || readlink -f "$0" || /bin/readlink -f "$script") 2>/dev/null
    [[ $path ]] && script=$path
  fi

  [[ $script =~ ^(/?)(.*/)[^/]*$ ]]
  local script_dir=${BASH_REMATCH[1]:-$PWD/}${BASH_REMATCH[2]}
  script_dir=${script_dir%/}
  if [[ -d ${script_dir:-/} ]]; then
    cpudir=$script_dir
  elif local dir=${XDG_DATA_HOME:-$HOME/.local/share}/cpulook; [[ -d $dir ]]; then
    cpudir=$dir
  else
    cpudir=$script_dir
  fi

  # Go to the parent directory until we find $cpudir/lib/cpudef.bash
  while
    local common=$cpudir/lib/cpudef.bash
    if [[ -f $common ]]; then
      if [[ ! -r $common ]]; then
        printf '%s\n' "$script: permission denied for the cpulook directory." >&2
        return 1
      fi
      source "$common"
      return "$?"
    fi
    [[ $cpudir == */* ]]
  do
    cpudir=${cpudir%/*}
  done

  cpudir=
  printf '%s\n' "$script: failed to detect the cpulook directory." >&2
  return 1
}
cpulook/initialize-cpudir || exit "$?"
##----CPULOOK_COMMON_HEADER_END----

#------------------------------------------------------------------------------
# definitions

source "$cpudir/m/switch"
if [[ $1 == v ]]; then
  cpuopt_verbose=v
  source "$cpudir/lib/echox.bash"
else
  cpuopt_verbose=
fi

# configuration
cpuopt_host_wait=300
cpuopt_task_wait=600

list=$cpudir/task.txt
cook=$cpudir/task.eat
stat=$cpulook_cache/cpustat.txt

#------------------------------------------------------------------------------
# cpu managing

function cpuseekd/wait-next-cpu/.is-valid-cpu {
  local cpus=$(awk '/^[[:space:]]*#/ { next; } /[^[:space:]]/ { print $1; }' "$cpulook_cpulist")
  local cpu
  for cpu in $cpus; do
    [[ $cpu == "$1" ]] && return 0
  done

  cpulook/is-function echoe &&
    echoe "fatal: invalid cpu name '$1'"
  return 1
}

## @fn cpuseekd/wait-next-cpu/.is-fresh-file file [duration]
##   @param[in] file
##   @param[in,out] duration
##     The number of seconds for the file to expire
##   @var[out] expires
function cpuseekd/wait-next-cpu/.is-fresh-file {
  local file=$1 duration=${2:-60}
  [[ -e $file ]] || return 1
  local now=$(date '+%s')
  local filetime=$(date '+%s' -r "$file")
  local age=$((now - filetime))
  expires=$((duration - age))
  ((expires>0))
}

cpustat_size=
cpustat_host=()
cpustat_idle=()
cpustat_info=()
function cpuseekd/wait-next-cpu/.update-cpustat {
  if [[ $cpuopt_verbose ]]; then
    echom "updating current cpustatus ..."
    "$cpudir/cpulook" 10
  else
    "$cpudir/cpulook" 10 &>/dev/null
  fi

  cpustat_size=0
  cpustat_host=()
  cpustat_idle=()
  cpustat_info=()

  local host idle nice
  while read -r host _ idle nice _; do
    cpustat_host[cpustat_size]=$host
    cpustat_idle[cpustat_size]=$idle
    cpustat_nice[cpustat_size]=$nice
    ((cpustat_size++))
  done < <(awk '$3 != "I"' "$stat")
}

## @fn cpuseekd/wait-next-cpu
##   This function waits for the next available cpu and returns the information
##   @var[out] host nice
function cpuseekd/wait-next-cpu {
  host= nice=

  local expires
  if [[ $cpustat_size && $cpustat_size -eq 0 ]]; then
    # 残機がないとき暫く待って再度取得
    cpuseekd/wait-next-cpu/.is-fresh-file "$stat" 60 && sleep "$expires"
    cpuseekd/wait-next-cpu/.update-cpustat
  elif [[ ! $cpustat_size ]] || ! cpuseekd/wait-next-cpu/.is-fresh-file "$stat" 60; then
    # cpustat 情報が古い時、更新
    cpuseekd/wait-next-cpu/.update-cpustat
  fi

  local i idle
  while true; do
    for ((i = 0; i < cpustat_size; i++)); do
      if ((cpustat_idle[i] > 0)); then
        host=${cpustat_host[i]}
        idle=${cpustat_idle[i]}
        nice=${cpustat_nice[i]}
        ((cpustat_idle[i] = idle - 1))

        if cpuseekd/wait-next-cpu/.is-valid-cpu "$host"; then
          host=$host
          nice=$nice
          return 0
        fi
      fi
    done
    
    if [[ $cpuopt_verbose ]]; then
      echom "$(date +'[%F %T]') No more cpus are available. Waiting for $cpuopt_host_wait seconds..."
    fi
    sleep "$cpuopt_host_wait"
    cpuseekd/wait-next-cpu/.update-cpustat
  done
}

#------------------------------------------------------------------------------
#-- single instance guard --
(($(ps ux | grep '\bcpuseekd\b' | wc -l) > 1)) || exit 0

function set-term-title {
  if [[ -t 1 ]]; then
    cpulook/put $'\ek[cpuseekd: '"$1"$']\e\\'
  fi
}

function cpuseekd/wait-next-tasklist {
  [[ -s $list ]] && return 0

  set-term-title "### waiting next task.txt... ###"
  sleep "$cpuopt_task_wait"
  [[ -s $list ]]
}

function cpuseekd/submit {
  local cmd=$1

  local host nice
  cpuseekd/wait-next-cpu
  [[ $host == 0 ]] && exit 1

  cpulook/system:"$cpulook_system"/submit "$host" "$cmd"
  return "$?"
}

function cpuseekd {
  while cpuseekd/wait-next-tasklist; do
    [[ -f $cook ]] && mv "$cook" "$cook.$(date +%Y%m%d-%H%M%S -r "$cook")"
    mv "$list" "$cook"
    local i iN=$(wc -l < "$cook")
    for ((i = 1; i <= iN; i++)); do
      set-term-title "### throwing task $i/$iN ###"
      local cmd=$(tail -n +"$i" "$cook" | head -1)
      [[ $cmd ]] && cpuseekd/submit "$cmd"
    done
  done
}
cpuseekd
