#!/bin/bash

#------------------------------------------------------------------------------
# utilities

fileage () {
  local file="$1"
  if test -e "$file"; then
    echo -n $(($(date '+%s')-$(date '+%s' -r "$file")))
  else
    echo -n 0
  fi
}

function wait-until {
  local condcmd="$1"
  local it itN
  itN=$(:|awk 'BEGIN{print int('"$timeout/0.2"')}')
  for((it=0;it<itN;it++));do
    if [[ -t 2 ]]; then
      case $((it%4)) in
      0) echo -n 'waiting ...|' >&2 ;;
      1) echo -n 'waiting .../' >&2 ;;
      2) echo -n 'waiting ...-' >&2 ;;
      3) echo -n 'waiting ...\' >&2 ;;
      esac
    fi
    sleep 0.2
    "$condcmd" && break
  done
}

#------------------------------------------------------------------------------

function cpustat.view {
  if local tput_colors=$(tput colors 2>&1) && ((tput_colors>=256)); then
    local sgr_mine=$'\e[97;48;5;27m';
    local sgr_other=$'\e[48;5;20m';
  else
    local sgr_mine=$'\e[97;42m';
    local sgr_other=$'\e[44m';
  fi

  gawk \
    -v sgr_mine="$sgr_mine" \
    -v sgr_other="$sgr_other" \
    -v COLUMNS="$COLUMNS" '
    function repeat(text,n, _ret){
      _ret="";
      while(n>0){
        if(and(n,1)==1)_ret=_ret text;
        text=text text;
        n=rshift(n,1);
      }
      return _ret;
    }

    function create_progress2(_i,_iW,_iN,_prog,_progress){
      _iN=WIDTH-1;
      for(_i=0;_i<_iN;_i++)_prog[_i]="_";
      for(_i=1;_i<ncor;_i++)_prog[int(WIDTH*_i/ncor-1)]="|";

      # bar: load average (EMA)
      _iW=int(WIDTH*load/ncor+0.5);
      if(_iW<_iN)
        _prog[_iW]="\x1b[91m#\x1b[97m"
      else
        _prog[_iN]="\x1b[91m" repeat("#",1+int(load-ncor+0.5)) "\x1b[m"

      # white: not used
      _iW=int(WIDTH*util/ncor+0.5);
      if(_iW<_iN)_prog[_iW]="\x1b[47m" _prog[_iW]

      # blue: used by other people
      if(uuse<util){
        _iW=int(WIDTH*uuse/ncor+0.5);
        if(_iW<_iN)_prog[_iW]=sgr_other _prog[_iW]
      }

      _progress="";
      for(_i=0;_i<_iN;_i++)_progress=_progress _prog[_i];
      _progress=sgr_mine _progress "\x1b[m";
      if(_prog[_iN]!="")_progress=_progress _prog[_iN];
      return _progress;
    }

    BEGIN{
      WIDTH=COLUMNS-41;
      if(WIDTH>64)WIDTH=64;
    }

    $9=="___"{
      progress="#CPU" repeat("_",WIDTH-5);
      print substr($0,1,length($0)-length($9)) progress;
      next;
    }

    {
      gmax=$2;
      util=$6*0.01;
      load=$7*0.01;
      uuse=$8;
      split($9,data,":");
      ncor=data[1];
      if(ncor+0==0)
        print
      else
        print substr($0,1,length($0)-length($9)) create_progress2();
    }
  '
}

function cpujobs.view {
  if test -t 1 -a -n "$COLUMNS"; then
    local cols=$((COLUMNS>80?COLUMNS:80))
    local s61='                                                             '
    awk -v s61="$s61" -v cols="$cols" '
     BEGIN{
       ioffset=40;
       indent=substr(s61,1,ioffset);
     }

     length($0)<cols{print;next}
     {
       print substr($0,1,cols-1);
       rest=substr($0,cols);
       rlen=length(rest);
       width=cols-1-ioffset;
       if(rlen<width){
         print substr(s61,1,cols-1-rlen) rest;
       }else while(rlen>0){
         print indent substr(rest,1,width);
         rest=substr(rest,width+1);
         rlen=length(rest);}}'
  else
    cat
  fi
}

#------------------------------------------------------------------------------
# settings

function cpudir.initialize {
  # cpudir="${MWGDIR:-$HOME/.mwg}/share/cpulook"
  # test -d "$cpudir" && return
  local _scr="$(readlink -f "$0" || /bin/readlink -f "$0" || echo "$0")"
  local _dir="${_scr%/*}"
  test "x$_dir" = "x$_scr" && _dir=.
  test -z "$_dir" && _dir=/
  cpudir="$_dir"
}
cpudir.initialize

tmpdir="$HOME/.local/share/cpulook/tmp"
[[ -d $tmpdir ]] || mkdir -p "$tmpdir"

cpustat="$tmpdir/cpustat.txt"
cpujobs="$tmpdir/cpujobs.txt"
cpulist="$cpudir/cpulist.cfg"

timeout="${1:-5}"

function cpulist.load {
  cpulist_data=()
  local line= rex_comment='^[[:space:]]*(#|$)'
  while IFS= read -r line || [[ $line ]]; do
    [[ $line =~ $rex_comment ]] && continue
    cpulist_data[${#cpulist_data[@]}]="$line"
  done < "$cpulist"
}

#------------------------------------------------------------------------------
# base

function rsh.dispatch {
  local host="$1"; shift
  local command="$*"

  local handler="$cpudir/hosts/$host.sh"
  if [[ -s $handler ]]; then
    source "$handler" rsh "$command" && return
  fi

  rsh "$host" "cd $cpudir; $command"
}

#------------------------------------------------------------------------------
# cpulook

# show cache
if [[ -e $cpustat && $(fileage "$cpustat") -lt 10 ]]; then
  test -s "$cpujobs" && cpujobs.view < "$cpujobs"
  cpustat.view < "$cpustat"
  exit 0
fi

# load cpulist.cfg
cpulist.load
declare -a hosts
hosts=("${cpulist_data[@]%%[$IFS]*}")

ftime="$tmpdir/cpulook.time"
> "$ftime"

# collect information

function hosts.cpugetdata/check {
  local host
  for host in "${hosts[@]}"; do
    local fstat="$tmpdir/$host.stat"
    test -s "$fstat" -a ! "$fstat" -ot "$ftime" || return 1
  done
  return 0
}

function hosts.cpugetdata {
  [[ -s $cpudir/m/switch/get_used@local.src ]] && \
    source "$cpudir/m/switch/get_used@local.src"

  local line fields host
  for line in "${cpulist_data[@]}"; do
    fields=($line)
    host=${fields[0]}

    : > "$tmpdir/$host.stat"
    rsh.dispatch "$host" "./cpugetdata.sh $line" 2>/dev/null | gawk \
      -v fstat="$tmpdir/$host.stat.part" \
      -v fjobs="$tmpdir/$host.jobs" \
      '
      /^==cpulook\.stat==$/{mode="stat";next;}
      mode=="stat"{print > fstat;}
      /^==cpulook\.jobs==$/{mode="jobs";next;}
      mode=="jobs"{print > fjobs;}
    ' && /bin/mv "$tmpdir/$host.stat.part" "$tmpdir/$host.stat" &>/dev/null &
  done

  wait-until hosts.cpugetdata/check
}

hosts.cpugetdata

# cpujobs
create_cpujobs(){
  local first=1
  local cpu=1
  for cpu in "${hosts[@]}"; do
    local fjobs="$tmpdir/$cpu.jobs"
    if [[ -s $fjobs && ! $fjobs -ot $ftime ]]; then
      if [[ $first ]]; then
        cat "$fjobs"
        first=
      else
        tail -n +2 "$fjobs"
      fi
    fi
  done
  [[ $first ]] || echo
}

# cpustat
create_cpustat(){
  local cpu
  echo "HOST         C  I  NI : UTIL   LOAD   UC ___"
  for cpu in "${hosts[@]}"; do
    if [[ "$tmpdir/$cpu.stat" -ot "$ftime" || ! -s "$tmpdir/$cpu.stat" ]]; then
      printf '%-12s  0  0 -- : ----.- ----.- -- \n' "$cpu"
    else
      echo "$(< "$tmpdir/$cpu.stat")"
    fi
  done
}

create_cpujobs | tee "$cpujobs" | cpujobs.view
create_cpustat | tee "$cpustat" | cpustat.view
