#!/usr/bin/env bash

function cpulook/initialize-cpudir {
  unset -f "$FUNCNAME"

  local script=$0
  if [[ -h $script ]]; then
    local path=$(realpath "$0" || readlink -f "$0" || /bin/readlink -f "$script") 2>/dev/null
    [[ $path ]] && script=$path
  fi

  local script_dir=${script%/*}
  [[ $script_dir == "$script" ]] && script_dir=.
  if [[ -d ${script_dir:=/} ]]; then
    cpudir=$script_dir
  elif local dir=${XDG_DATA_HOME:-$HOME/.local/share}/cpulook; [[ -d $dir ]]; then
    cpudir=$dir
  else
    cpudir=$script_dir
  fi

  # Note: The file ending with .sh is supposed to be a helper script, which is
  # already located in the lib subdirectory.
  [[ $script == *.sh ]] && cpudir=$cpudir/..

  local common=$cpudir/lib/common.bash
  if [[ ! -f $common ]]; then
    printf '%s\n' "$script: failed to detect the cpulook directory." >&2
    exit 2
  elif [[ ! -r $common ]]; then
    printf '%s\n' "$script: permission denied for the cpulook directory." >&2
    exit 2
  else
    source "$common"
  fi
}
cpulook/initialize-cpudir
##----CPULOOK_COMMON_HEADER_END----

[[ -d $cpulook_cache ]] || mkdir -p "$cpulook_cache"

arg_timeout=
arg_host_pattern=
flag_cpugetdata=
flag_help=
function cpulook/read_argument {
  while (($#)); do
    local arg=$1; shift
    case "$arg" in
    (--cpugetdata)
      flag_cpugetdata=1 ;;
    (--help)
      flag_help=1 ;;
    (--host-pattern=*)
      arg_host_pattern=${arg#*=} ;;
    (*)
      if [[ ! $arg_timeout ]]; then
        arg_timeout=$arg
      else
        echo "cpulook (arguments): timeout is specified more than once" >&2
        return 1
      fi ;;
    esac
  done
}

cpulook/read_argument "$@"

if [[ $flag_help ]]; then
  cat <<EOF
cpulook [options] [timeout]

OPTIONS

  --help
    Show help

  --cpugetdata
    Output in the cpugetdata format. For internal usage.

  --host-pattern=HOSTNAMES
    Comma separated list of hostname to check.

TIMEOUT

  Timeout in seconds. Fractional numbers can be specified.

EOF
  exit
fi

#------------------------------------------------------------------------------
# utilities

function get_fileage {
  local var=$1 file=$2
  if [[ -e $file ]]; then
    eval "$var=$(($(date '+%s')-$(date '+%s' -r "$file")))"
  else
    eval "$var=-1"
  fi
}

timeout="${arg_timeout:-10}"
## @var[in] timeout
function wait-until {
  local condcmd=$1
  local wait_status= it itN
  itN=$(:|awk 'BEGIN{print int('"${timeout:-5}/0.2"')}')
  local spin='|/-\'
  for ((it=0;it<itN;it++)); do
    [[ -t 2 ]] && printf 'waiting %s...%s\r' "${wait_status:+($wait_status) }" "${spin:it%${#spin}:1}" >&2
    sleep 0.2
    "$condcmd" && break
  done
}

## @var[out] row
## @var[out] col
function DSR6 {
  local timeout=1
  ((BASH_VERSINFO>=4)) && timeout=0.2 # 小数は bash-4.0 以上
  [[ -t 6 ]] &&
    IFS=\; read -sdR -p $'\e[6n' -t "$timeout" row col &&
    row="${row#*[}"
} <&6 >&6

#------------------------------------------------------------------------------

function cpustat.view/cpugetdata {
  echo ==cpulook.stat==
  sed 1d
}

function cpustat.view/color {
  local tput_colors=$(tput colors 2>&1)

  local row col block_char_width=0
  printf '\r\xE2\x96\x88'
  DSR6 && ((block_char_width=col-1))
  printf '\r\e[K'

  gawk \
    -v COLUMNS="$COLUMNS" \
    -v tput_colors="$tput_colors" \
    -v block_char_width="$block_char_width" '
    #
    # color utilities
    #
    BEGIN {
      if (tput_colors >= 256) {
        COLOR_UUSE = 27;
        COLOR_UTIL = 20;
        COLOR_FREE = 7;
      } else {
        COLOR_UUSE = 2;
        COLOR_UTIL = 4;
        COLOR_FREE = 7;
      }
    }
    function sgrbg(color) {
      color = int(color);
      if (color < 0) return "\x1b[49m";
      if (color < 8) return "\x1b[4" color "m";
      if (color < 16) return "\x1b[10" (color - 8) "m";
      return "\x1b[48;5;" color "m";
    }
    function sgrfg(color) {
      color = int(color);
      if (color < 0) return "\x1b[39m";
      if (color < 8) return "\x1b[3" color "m";
      if (color < 16) return "\x1b[9" (color - 8) "m";
      return "\x1b[38;5;" color "m";
    }

    function repeat(text,n, _ret){
      _ret="";
      while(n>0){
        if(and(n,1)==1)_ret=_ret text;
        text=text text;
        n=rshift(n,1);
      }
      return _ret;
    }

    function abs(value) {
      return value < 0? -value: value;
    }
    ## @fn nearest(value, a, b)
    ##   a と b で value に近い方を選択する。
    ##   両方が同じ距離にある場合には a を使用する。
    function nearest(value, a, b) {
      return abs(value - a) <= abs(value - b)? a: b;
    }
    function clamp(value, a, b) {
      return value < a? a: value > b? b: value;
    }
    function ceil(value, _ivalue) {
      _ivalue = int(value);
      return _ivalue == value || value < 0? _ivalue: _ivalue + 1;
    }

    #
    # progress3
    #
    BEGIN {
      BLOCK[9] = "#";
      BLOCK[8] = "\xE2\x96\x88";
      BLOCK[7] = "\xE2\x96\x89";
      BLOCK[6] = "\xE2\x96\x8a";
      BLOCK[5] = "\xE2\x96\x8b";
      BLOCK[4] = "\xE2\x96\x8c";
      BLOCK[3] = "\xE2\x96\x8d";
      BLOCK[2] = "\xE2\x96\x8e";
      BLOCK[1] = "\xE2\x96\x8f";
      BLOCK[0] = " ";
    }
    function progress3_render(core_width, prog, prog_lcolor, prog_rcolor, _iN, _nfold, _ret, _curfg, _curbg, _i, _iend, _bwidth, _newfg, _newbg) {
      _iN = core_width * ncor;
      if (CPUBAR_FOLD_BALANCED)
        _nfold = core_width * ceil(ncor / ceil(ncor / int(CPUBAR_WIDTH / core_width)));
      else
        _nfold = int(CPUBAR_WIDTH / core_width) * core_width;

      _ret = "";
      _curfg = -1;
      _curbg = -1;
      for (_i = 0; _i < _iN; _i++) {
        _bwidth = prog[_i];
        _newfg = prog_lcolor[_i];
        _newbg = _bwidth == 8? -1: prog_rcolor[_i];
        _iend = _i + 1;
        if (_curfg != _newfg) {_ret = _ret sgrfg(_newfg); _curfg = _newfg;}
        if (_curbg != _newbg) {_ret = _ret sgrbg(_newbg); _curbg = _newbg;}
        if (_bwidth == 8 && _iend % core_width == 0 && _iend % _nfold != 0) _bwidth = 7;
        _ret = _ret BLOCK[_bwidth];
        if (_iend % _nfold == 0 && _iend != _iN) {
          _ret = _ret "\x1b[m\n" repeat(" ", CPUBAR_OFFSET);
          _curfg = _curbg = -1;
        }
      }
      _ret = _ret "\x1b[m";
      return _ret;
    }
    function create_progress3(core_width, util1, util8, uuse1, uuse8, load1, _i, _iN, _prog, _prog_lcolor, _prog_rcolor) {
      if (CPUBAR_CORE_STRETCH)
        core_width = clamp(int(clamp(WIDTH, 16, CPUBAR_WIDTH) / ncor), 2, 4);
      else
        core_width = 4;

      util8 = int(util * core_width * 8 + 0.5);
      util1 = int(util8 / 8);
      uuse8 = int(uuse * core_width * 8 + 0.5);
      if (uuse8 > util1 * 8);
        uuse8 = nearest(uuse8, util8, util1 * 8);
      uuse1 = int(uuse8 / 8);

      load1 = int(load * core_width + 0.5);

      _iN = core_width * ncor;
      for (_i = 0; _i < uuse1; _i++) {
        _prog[_i] = 8;
        _prog_lcolor[_i] = COLOR_UUSE;
      }
      if (uuse8 % 8) {
        _prog[_i] = uuse8 % 8;
        _prog_lcolor[_i] = COLOR_UUSE;
        _prog_rcolor[_i] = uuse8 < util8? COLOR_UTIL: COLOR_FREE;
        _i++;
      }
      for (; _i < util1; _i++) {
        _prog[_i] = 8;
        _prog_lcolor[_i] = COLOR_UTIL;
      }
      if (util8 % 8) {
        _prog[_i] = util8 % 8;
        _prog_lcolor[_i] = COLOR_UTIL;
        _prog_rcolor[_i] = COLOR_FREE;
        _i++;
      }
      for (; _i < _iN; _i++) {
        _prog[_i] = 8;
        _prog_lcolor[_i] = COLOR_FREE;
      }

      if (load1 > util1) {
        if (load1 >= _iN) {
          _tail = "\x1b[" repeat("#", clamp(int(load - ncor + 0.5), 1, 20)) "\x1b[m";
        } else {
          _prog[load1] = 9;
          _prog_rcolor[load1] = _prog_lcolor[load1];
          _prog_lcolor[load1] = 9;
          _tail = "";
        }
      }

      return progress3_render(core_width, _prog, _prog_lcolor, _prog_rcolor) _tail;
    }

    function create_progress2(_width, _i,_iW,_iN,_prog,_progress){
      _width = clamp(WIDTH, 16, CPUBAR_WIDTH);
      _iN=_width-1;
      for(_i=0;_i<_iN;_i++)_prog[_i]="_";
      for(_i=1;_i<ncor;_i++)_prog[int(_width*_i/ncor-1)]="|";

      # bar: load average (EMA)
      _iW=int(_width*load/ncor+0.5);
      if(_iW<_iN)
        _prog[_iW]="\x1b[91m#\x1b[97m"
      else
        _prog[_iN]="\x1b[91m" repeat("#",1+int(load-ncor+0.5)) "\x1b[m"

      # white: not used
      _iW=int(_width*util/ncor+0.5);
      if(_iW<_iN)_prog[_iW]="\x1b[47m" _prog[_iW]

      # blue: used by other people
      if(uuse<util){
        _iW=int(_width*uuse/ncor+0.5);
        if (_iW < _iN) _prog[_iW] = sgrbg(COLOR_UTIL) _prog[_iW]
      }

      _progress="";
      for(_i=0;_i<_iN;_i++)_progress=_progress _prog[_i];
      _progress = sgrfg(15) sgrbg(COLOR_UUSE) _progress "\x1b[m";
      if(_prog[_iN]!="")_progress=_progress _prog[_iN];
      return _progress;
    }

    BEGIN{
      CPUBAR_WIDTH = 64;
      CPUBAR_OFFSET = 41;
      WIDTH = COLUMNS - CPUBAR_OFFSET;

      # options for progress3
      if (block_char_width == 1) {
        CPUBAR_WIDTH = 32;
        CPUBAR_CORE_STRETCH = 0; # core の表示幅を自動的に変えるかどうか
        CPUBAR_FOLD_BALANCED = 0; # 1行の core 数を揃えるかどうか
      }
    }

    $9 == "___" {
      CPUBAR_OFFSET = length($0) - length($9);
      WIDTH = COLUMNS - CPUBAR_OFFSET;
      progress = "#CPU" repeat("_", clamp(WIDTH, 16, CPUBAR_WIDTH) - 5);
      print substr($0, 1, CPUBAR_OFFSET) progress;
      next;
    }

    {
      gmax=$2;
      util=$6*0.01;
      load=$7*0.01;
      uuse=$8;
      split($9,data,":");
      ncor=data[1];
      if(ncor+0==0)
        print
      else {
        cpustat = substr($0,1,length($0)-length($9));
        if (block_char_width == 1)
          cpubar = create_progress3()
        else
          cpubar = create_progress2();
        print cpustat cpubar;
      }
    }
  '
}

function cpustat.view {
  if [[ $flag_cpugetdata ]]; then
    cpustat.view/cpugetdata
  else
    cpustat.view/color
  fi
}

function cpujobs.view/cpugetdata {
  echo ==cpulook.jobs==
  sed '1d;/^$/d'
}

function cpujobs.view/fold {
  local -i cols=$1
  local s61='                                                             '
  awk -v s61="$s61" -v cols="$cols" '
   BEGIN{
     ioffset=40;
     indent=substr(s61,1,ioffset);
   }

   length($0)<cols{print;next}
   {
     print substr($0,1,cols-1);
     rest=substr($0,cols);
     rlen=length(rest);
     width=cols-1-ioffset;
     if(rlen<width){
       print substr(s61,1,cols-1-rlen) rest;
     }else while(rlen>0){
       print indent substr(rest,1,width);
       rest=substr(rest,width+1);
       rlen=length(rest);}}'
}

function cpujobs.view {
  if [[ $flag_cpugetdata ]]; then
    cpujobs.view/cpugetdata
  elif [[ -t 1 && $COLUMNS ]]; then
    cpujobs.view/fold $((COLUMNS>80?COLUMNS:80))
  else
    cat
  fi
}

#------------------------------------------------------------------------------
# settings

cpustat="$cpulook_cache/cpustat.txt"
cpujobs="$cpulook_cache/cpujobs.txt"
cpulist="$cpudir/cpulist.cfg"

function cpulist.load {
  cpulist_data=()
  local line= rex_comment='^[[:space:]]*(#|$)'
  while IFS= read -r line || [[ $line ]]; do
    [[ $line =~ $rex_comment ]] && continue
    cpulist_data[${#cpulist_data[@]}]="$line"
  done < "$cpulist"
}

#------------------------------------------------------------------------------
# cpulook

exec 6<> /dev/tty

# show cache
get_fileage age "$cpustat"
if ((0<=age&&age<10)); then
  [[ -s $cpujobs ]] && cpujobs.view < "$cpujobs"
  cpustat.view < "$cpustat"
  exit 0
fi

# load cpulist.cfg
cpulist.load

hosts=()
function hosts.initialize {
  hosts=("${cpulist_data[@]%%[$IFS]*}")

  # filter by arg_host_pattern
  if [[ $arg_host_pattern ]]; then
    IFS=, eval 'local -a patterns=($arg_host_pattern)'
    local -a hosts_filtered=()
    local host pattern
    for host in "${hosts[@]}"; do
      for pattern in "${patterns[@]}"; do
        if [[ $host == $pattern ]]; then
          hosts_filtered[${#hosts_filtered[@]}]=$host
          break
        fi
      done
    done
    hosts=("${hosts_filtered[@]}")
  fi
}
hosts.initialize

ftime=$cpulook_cache/cpulook.time
: > "$ftime"

# collect information

function hosts.cpugetdata/check {
  local host count=0 N=${#hosts[@]}
  for host in "${hosts[@]}"; do
    local fstat="$cpulook_cache/$host.stat"
    [[ -s $fstat && ! ( $fstat -ot $ftime ) ]] && let count++
  done

  wait_status=$count/$N
  ((count==N))
}

function hosts.cpugetdata {
  [[ -s $cpudir/m/switch/get_used@local.src ]] && \
    source "$cpudir/m/switch/get_used@local.src"

  local line fields host
  for line in "${cpulist_data[@]}"; do
    fields=($line)
    host=${fields[0]}

    : > "$cpulook_cache/$host.stat"
    rsh.dispatch "$host" "lib/cpugetdata.sh $line" 2>/dev/null | gawk \
      -v fstat="$cpulook_cache/$host.stat.part" \
      -v fjobs="$cpulook_cache/$host.jobs" \
      '
      /^==cpulook\.stat==$/{mode="stat";next;}
      mode=="stat"{print > fstat;}
      /^==cpulook\.jobs==$/{mode="jobs";next;}
      mode=="jobs"{print > fjobs;}
    ' && /bin/mv "$cpulook_cache/$host.stat.part" "$cpulook_cache/$host.stat" &>/dev/null &
  done

  wait-until hosts.cpugetdata/check
}

hosts.cpugetdata

# cpujobs
create_cpujobs(){
  local first=1
  local cpu=1
  for cpu in "${hosts[@]}"; do
    local fjobs="$cpulook_cache/$cpu.jobs"
    if [[ -s $fjobs && ! $fjobs -ot $ftime ]]; then
      if [[ $first ]]; then
        cat "$fjobs"
        first=
      else
        tail -n +2 "$fjobs"
      fi
    fi
  done
  [[ $first ]] || echo
}

# cpustat
create_cpustat(){
  local cpu
  echo "HOST         C  I  NI : UTIL   LOAD   UC ___"
  for cpu in "${hosts[@]}"; do
    if [[ $cpulook_cache/$cpu.stat -ot $ftime || ! -s $cpulook_cache/$cpu.stat ]]; then
      printf '%-12s  0  0 -- : ----.- ----.- -- \n' "$cpu"
    else
      echo "$(< "$cpulook_cache/$cpu.stat")"
    fi
  done
}

if [[ $arg_host_pattern ]]; then
  create_cpujobs | cpujobs.view
  create_cpustat | cpustat.view
else
  create_cpujobs | tee "$cpujobs" | cpujobs.view
  create_cpustat | tee "$cpustat" | cpustat.view
fi
